{"version":3,"sources":["components/sunrise.js","App.js","reportWebVitals.js","index.js"],"names":["Sunrise","SunCalc","require","useState","zip_code","setZipCode","date","setDate","dateTime","setDateTime","rise","set","sun","setSun","porsi","setPorsi","submitZip","e","a","preventDefault","fetch","response","json","payload","temp_lat","results","geometry","location","lat","temp_long","lng","temp_sun","getTimes","Date","sunrise","moment","toTimeString","format","sunset","sunset_military","daylight","diff","minToAdd","parseInt","final_time","add","type","value","onChange","target","onClick","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAKA,SAASA,IACP,IAAIC,EAAUC,EAAQ,IAEtB,EAA+BC,qBAA/B,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAwBF,qBAAxB,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAgCJ,qBAAhC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAsBN,mBAAS,CAAEO,KAAM,GAAIC,IAAK,KAAhD,mBAAOC,EAAP,KAAYC,EAAZ,KACA,EAA0BV,qBAA1B,mBAAOW,EAAP,KAAcC,EAAd,KAUMC,EAAS,uCAAG,WAAOC,GAAP,mCAAAC,EAAA,6DAChBD,EAAEE,iBADc,SAEOC,MAAM,4EAAD,OACkDhB,EADlD,oDAFZ,cAEViB,EAFU,gBAKMA,EAASC,OALf,OAKVC,EALU,OAOZC,EAAWD,EAAQE,QAAQ,GAAGC,SAASC,SAASC,IAChDC,EAAYN,EAAQE,QAAQ,GAAGC,SAASC,SAASG,IAEjDC,EAAW9B,EAAQ+B,SAAS,IAAIC,KAAKzB,GAAWgB,EAAUK,GAExDK,EAAUC,IAAOJ,EAASG,QAAQE,eAAgB,aAAaC,OACnE,UAGIC,EAASH,IAAOJ,EAASO,OAAOF,eAAgB,aAAaC,OACjE,UAEIE,EAAkBJ,IACtBJ,EAASO,OAAOF,eAChB,aACAC,OAAO,SAEHG,EAAWL,IAAOD,EAAS,UAAUO,KAAKN,IAAOI,EAAgB,QAAQ,WACzEG,GAAgC,EAApBC,SAASH,GAAc,EACnCI,EAAcT,IAAOD,EAAS,UAAUW,IAAIH,EAAS,WAAWL,OAAO,UAC7EtB,EAAS6B,GAET/B,EAAO,CACLH,KAAMwB,EACNvB,IAAK2B,IA/BS,4CAAH,sDAmCf,OACE,gCACE,iCACE,8CAEE,uBACEQ,KAAK,SACLC,MAAO3C,EACP4C,SApDc,SAAC/B,GACvBZ,EAAWY,EAAEgC,OAAOF,aAsDhB,0CAEE,uBAAOD,KAAK,OAAOC,MAAOzC,EAAM0C,SArDf,SAAC/B,GACxBV,EAAQU,EAAEgC,OAAOF,OACjBtC,EAAY,GAAD,OAAIQ,EAAEgC,OAAOF,MAAb,oBAqDP,wBAAQG,QAASlC,EAAjB,uBAGF,8CAAiBJ,EAAIF,QACrB,4CAAeE,EAAID,OACnB,gDAAmBG,QChEVqC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAACpD,EAAD,OCISqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c300ea51.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport moment from \"moment\";\n\nfunction Sunrise() {\n  var SunCalc = require(\"suncalc\");\n\n  const [zip_code, setZipCode] = useState();\n  const [date, setDate] = useState();\n  const [dateTime, setDateTime] = useState();\n  const [sun, setSun] = useState({ rise: \"\", set: \"\" });\n  const [porsi, setPorsi] = useState();\n  const handleChangeZip = (e) => {\n    setZipCode(e.target.value);\n  };\n\n  const handleChangeDate = (e) => {\n    setDate(e.target.value);\n    setDateTime(`${e.target.value}T12:00:00`);\n  };\n\n  const submitZip = async (e) => {\n    e.preventDefault();\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:${zip_code}%20&key=AIzaSyCItqD_bz3EaNVbnFP7aXzr_Thj0slENpU`\n    );\n    const payload = await response.json();\n\n    var temp_lat = payload.results[0].geometry.location.lat;\n    var temp_long = payload.results[0].geometry.location.lng;\n\n    var temp_sun = SunCalc.getTimes(new Date(dateTime), temp_lat, temp_long);\n\n    const sunrise = moment(temp_sun.sunrise.toTimeString(), \"HH:mm:ss \").format(\n      \"h:mm A\"\n    );\n   \n    const sunset = moment(temp_sun.sunset.toTimeString(), \"HH:mm:ss \").format(\n      \"h:mm A\"\n    );\n    const sunset_military = moment(\n      temp_sun.sunset.toTimeString(),\n      \"HH:mm:ss \"\n    ).format(\"HH:mm\");\n\n    const daylight = moment(sunrise, \"h:mm A\").diff(moment(sunset_military,\"H:mm\"),'minutes')\n    const minToAdd = (parseInt(daylight)*-1)/4;\n    const final_time =  moment(sunrise, \"h:mm A\").add(minToAdd,\"minutes\").format(\"h:mm A\");\n    setPorsi(final_time);\n\n    setSun({\n      rise: sunrise,\n      set: sunset,\n    });\n  };\n\n  return (\n    <div>\n      <form>\n        <label>\n          Zip Code:\n          <input\n            type=\"number\"\n            value={zip_code}\n            onChange={handleChangeZip}\n          ></input>\n        </label>\n        <label>\n          Date:\n          <input type=\"date\" value={date} onChange={handleChangeDate}></input>\n        </label>\n        <button onClick={submitZip}>Submit</button>\n      </form>\n\n      <p>Sun Rise is: {sun.rise}</p>\n      <p>SunSet is: {sun.set}</p>\n      <p>Porsi Time is: {porsi}</p>\n    </div>\n  );\n}\n\nexport { Sunrise };\n\n// Simulate a location service\n","/* eslint-disable no-unused-vars */\n\nimport './App.css';\nimport {Sunrise} from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sunrise/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}