{"version":3,"sources":["components/sunrise.js","App.js","reportWebVitals.js","index.js"],"names":["Sunrise","SunCalc","require","useEffect","document","title","useState","zip_code","setZipCode","Date","toISOString","slice","date","setDate","dateTime","setDateTime","rise","set","sun","setSun","porsi","setPorsi","navkarsi","setNavkarsi","sadhporsi","setSadhporsi","purimaddh","setPurimaddh","addressTitle","setAddressTitle","validate","setValidate","show","setShow","getSunTimes","a","fetch","response","json","payload","temp_lat","results","geometry","location","lat","temp_long","lng","formatted_address","temp_sun","getTimes","sunrise","moment","toTimeString","format","sunset","sunset_military","daylight","diff","porsi_add","parseInt","porsi_time","add","navkarsi_time","sadhporsi_add","sadhporsi_time","purimaddh_add","purimaddh_time","handleSubmit","e","form","currentTarget","checkValidity","preventDefault","stopPropagation","console","log","className","Typography","variant","align","Divider","Form","noValidate","validated","onSubmit","Group","Label","Control","type","required","value","isValid","length","onChange","target","Feedback","Button","style","margin","Paper","elevation","Row","Col","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.377ddcf8.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nimport React, { useEffect, useState } from \"react\";\nimport { Form, Button, Row, Col } from \"react-bootstrap\";\nimport moment from \"moment\";\nimport { Paper, Typography, Divider } from \"@material-ui/core\";\nimport style from \"bootstrap/dist/css/bootstrap.css\";\nimport \"./style.css\";\n\nfunction Sunrise() {\n  //import suncalc package\n  var SunCalc = require(\"suncalc\");\n\n  //Set document title for tab name\n  useEffect(() => {\n    document.title = \"Pachkan Calculator\";\n  }, []);\n\n  //Intialize Form input states\n  const [zip_code, setZipCode] = useState(\"08823\");\n  const [date, setDate] = useState(new Date().toISOString().slice(0, 10));\n\n  //default date time to current date time\n  const [dateTime, setDateTime] = useState(\n    new Date().toISOString().slice(0, 10) + \"T12:00:00\"\n  );\n\n  //initalize state for sun times\n  const [sun, setSun] = useState({ rise: \"\", set: \"\" });\n\n  //initalize states for calculated times\n  const [porsi, setPorsi] = useState();\n  const [navkarsi, setNavkarsi] = useState();\n  const [sadhporsi, setSadhporsi] = useState();\n  const [purimaddh, setPurimaddh] = useState();\n\n  //Address title \n  const [addressTitle,setAddressTitle] = useState();\n\n  //is input form validated\n  const [validate, setValidate] = useState(false);\n\n  //show parana times state\n  const [show, setShow] = useState(false);\n\n  //API key for geocoding\n  const API_KEY = \"AIzaSyCItqD_bz3EaNVbnFP7aXzr_Thj0slENpU\";\n\n  //handle input function\n  const handleChangeZip = (e) => {\n    setZipCode(e.target.value);\n  };\n\n  const handleChangeDate = (e) => {\n    setDate(e.target.value);\n    setDateTime(`${e.target.value}T12:00:00`);\n  };\n\n  //function to get parna times based on location input\n  const getSunTimes = async () => {\n    const response = await fetch(\n      `https://maps.googleapis.com/maps/api/geocode/json?components=postal_code:${zip_code}%20&key=${API_KEY}`\n    );\n    const payload = await response.json();\n\n    // latitude and longitude from\n    var temp_lat = payload.results[0].geometry.location.lat;\n    var temp_long = payload.results[0].geometry.location.lng;\n\n    // const temp_lat = 40.435471;\n    // const temp_long = -74.555847;\n\n    //set address title\n    setAddressTitle(payload.results[0].formatted_address);\n\n    //set sun times into variable based on input location\n    var temp_sun = SunCalc.getTimes(new Date(dateTime), temp_lat, temp_long);\n\n    //sun times\n    const sunrise = moment(temp_sun.sunrise.toTimeString(), \"HH:mm:ss \").format(\n      \"h:mm A\"\n    );\n\n    const sunset = moment(temp_sun.sunset.toTimeString(), \"HH:mm:ss \").format(\n      \"h:mm A\"\n    );\n\n    setSun({\n      rise: sunrise,\n      set: sunset,\n    });\n\n    //convert sun times to get number of min in daylight\n    const sunset_military = moment(\n      temp_sun.sunset.toTimeString(),\n      \"HH:mm:ss \"\n    ).format(\"HH:mm\");\n\n    const daylight = moment(sunrise, \"h:mm A\").diff(\n      moment(sunset_military, \"H:mm\"),\n      \"minutes\"\n    );\n\n    // Porsi time = 25%  of min of sunlight + sunrise\n    const porsi_add = (parseInt(daylight) * -1) / 4;\n    const porsi_time = moment(sunrise, \"h:mm A\")\n      .add(porsi_add, \"minutes\")\n      .format(\"h:mm A\");\n    setPorsi(porsi_time);\n\n    // navkarsi time = 48 min + sunrise\n    const navkarsi_time = moment(sunrise, \"h:mm A\")\n      .add(48, \"minutes\")\n      .format(\"h:mm A\");\n    setNavkarsi(navkarsi_time);\n\n    // sadhporsi time = 37.5%  of min of sunlight + sunrise\n    const sadhporsi_add = ((parseInt(daylight) * -1) / 4) * 1.5;\n    const sadhporsi_time = moment(sunrise, \"h:mm A\")\n      .add(sadhporsi_add, \"minutes\")\n      .format(\"h:mm A\");\n    setSadhporsi(sadhporsi_time);\n\n    // purimaddh time = 75%  of min of sunlight + sunrise\n    const purimaddh_add = parseInt(daylight) * -1 * 0.75;\n    const purimaddh_time = moment(sunrise, \"h:mm A\")\n      .add(purimaddh_add, \"minutes\")\n      .format(\"h:mm A\");\n    setPurimaddh(purimaddh_time);\n\n    //show times after they are calculated\n    setShow(true);\n  };\n\n //submit function for form\n  const handleSubmit = async (e) => {\n    const form = e.currentTarget;\n\n    if (form.checkValidity() === false) {\n      e.preventDefault();\n      e.stopPropagation();\n      console.log(\"test\");\n    }\n    if (form.checkValidity() === true) {\n      e.preventDefault();\n      getSunTimes();\n    }\n\n    setValidate(true);\n  };\n\n  return (\n    <div>\n      <div className=\"header\">\n        <Typography variant=\"h2\" align=\"center\">\n          Pachkan Calculater\n        </Typography>\n      </div>\n      <Divider />\n      <br />\n      <Form noValidate validated={validate} onSubmit={handleSubmit}>\n        <Form.Group className=\"input-row\">\n          <Form.Label>Zip Code</Form.Label>\n          <Form.Control\n            type=\"number\"\n            required\n            value={zip_code}\n            isValid={zip_code.length !== 0}\n            onChange={handleChangeZip}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Zip Code Required\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group className=\"input-row\">\n          <Form.Label>Date</Form.Label>\n          <Form.Control\n            type=\"date\"\n            required\n            isValid={date ? date.length !== 0 : false}\n            value={date}\n            onChange={handleChangeDate}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Date Required\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Button type=\"submit\" variant=\"primary\" style={{ margin: 10 }}>\n          Submit\n        </Button>\n      </Form>\n      <br/>\n\n      {show ? (\n        <>\n          <Typography variant=\"h4\">{addressTitle}</Typography>\n          <Paper elevation={3} className=\"paper-sunrise\">\n            <Row className=\"row\">\n              <Col>\n                <Typography variant=\"h5\">Sunrise:</Typography>\n              </Col>\n              <Col>\n                <Typography variant=\"body1\">{sun.rise}</Typography>\n              </Col>\n            </Row>\n          </Paper>\n          <Paper elevation={3} className=\"paper-day\">\n            <Row className=\"row\">\n              <Col>\n                <Typography variant=\"h5\">Navkarsi:</Typography>\n              </Col>\n              <Col>\n                <Typography variant=\"body1\">{navkarsi}</Typography>\n              </Col>\n            </Row>\n            <Row className=\"row\">\n              <Col>\n                <Typography variant=\"h5\">Porsi:</Typography>\n              </Col>\n              <Col>\n                <Typography variant=\"body1\">{porsi}</Typography>\n              </Col>\n            </Row>\n            <Row className=\"row\">\n              <Col>\n                <Typography variant=\"h5\">Sadhporsi:</Typography>\n              </Col>\n              <Col>\n                <Typography variant=\"body1\">{sadhporsi}</Typography>\n              </Col>\n            </Row>\n            <Row className=\"row\">\n              <Col>\n                <Typography variant=\"h5\" className=\"sunset-typography\" >Purimaddh-Avaddh:</Typography>\n              </Col>\n              <Col>\n                <Typography variant=\"body1\" className=\"sunset-typography\">{purimaddh}</Typography>\n              </Col>\n            </Row>\n          </Paper>\n          <Paper elevation={3} className=\"paper-sunset\">\n            <Row className=\"row\">\n              <Col>\n                <Typography variant=\"h5\" className=\"sunset-typography\">Sunset:</Typography>\n              </Col>\n              <Col>\n                <Typography variant=\"body1\" className=\"sunset-typography\">{sun.set}</Typography>\n              </Col>\n            </Row>\n          </Paper>\n        </>\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n}\n\nexport { Sunrise };\n\n// Simulate a location service\n","/* eslint-disable no-unused-vars */\n\nimport './App.css';\nimport {Sunrise} from \"./components\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Sunrise/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}